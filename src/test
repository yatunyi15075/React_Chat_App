
/* // TEST AND REMOVE THIS AT HOME */

/* Update wrapper to have position:relative */
/* .wrapper {
  position: relative;
  height: 100vh;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden; /* Hide overflow to prevent scrolling */
} 

/* Add overlay for dark effect */
/* .overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6); /* Dark overlay */
} 

/* Add image background */
/* .background-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url('img.jpg'); /* Replace 'img.jpg' with your image path */
  /* background-size: cover;
  background-position: center;
  filter: blur(5px); /* Apply slight blur to the image */
} 

/* Update form container styles */
/* .form {
  position: relative;
  z-index: 1; /* Ensure form appears above the image */
  /* width: 350px;
  background-color: rgba(255, 255, 255, 0.9);
  border-radius: 1rem;
  padding: 2rem;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
} */ 

/* Update title styles */
/* .title {
  text-align: center;
  color: #fff;
  margin-bottom: 2rem;
  font-size: 2.5rem;
} */

/* Update input styles */
/* .input {
  color: #333;
  font-size: 1rem;
  margin: 0 auto;
  padding: 1rem 1.5rem;
  border-radius: 2rem;
  background-color: rgba(255, 255, 255, 0.9);
  border: none;
  width: 90%;
  display: block;
  border-bottom: 0.2rem solid transparent;
  transition: all 0.3s;
  outline: none;
  margin-bottom: 2rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
} */

/* Update button styles */
/* .button {
  border-radius: 2rem;
  border: none;
  background-color: #2ecc71;
  color: white;
  text-align: center;
  text-transform: uppercase;
  font-size: 1.2rem;
  padding: 1.5rem;
  width: 100%;
  transition: background-color 0.3s, transform 0.3s;
  cursor: pointer;
  margin: 1rem 0;
  outline: none;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
} */

/* Button hover effect */
/* .button:hover {
  background-color: #27ae60;
  transform: translateY(-3px);
} */

/* Button span hover effect */
/* .button span {
  position: relative;
  transition: transform 0.3s ease-in-out;
}

.button:hover span {
  transform: translateX(5px); */
}






for the chat FEED



/* Update chat-feed styles */
.chat-feed {
    height: calc(100% - 50px); /* Adjust height to fit within the screen */
    overflow-y: scroll; /* Add scrollbar for overflow */
    padding: 20px; /* Add padding for better spacing */
  }
  
  /* Update chat-title styles */
  .chat-title-container {
    margin-bottom: 20px; /* Add margin bottom for spacing */
  }
  
  .chat-title {
    font-size: 24px; /* Increase font size for emphasis */
    font-weight: bold; /* Add bold font weight */
    color: #333; /* Update text color */
  }
  
  .chat-subtitle {
    font-size: 14px; /* Decrease font size for better proportion */
    color: #777; /* Update text color */
  }
  
  /* Update message-block styles */
  .message-block {
    margin-bottom: 15px; /* Add margin bottom for spacing */
  }
  
  /* Update read-receipts styles */
  .read-receipts {
    display: flex; /* Use flexbox for alignment */
    align-items: center; /* Align items vertically */
  }
  
  .read-receipt {
    width: 20px; /* Adjust width for read receipt */
    height: 20px; /* Adjust height for read receipt */
    border-radius: 50%; /* Make read receipt circular */
    margin-right: 5px; /* Add margin for spacing */
  }

  




  for chat FEED




  import MyMessage from './MyMessage';
import TheirMessage from './TheirMessage';
import MessageForm from './MessageForm';

const ChatFeed = (props) => {
  const { chats, activeChat, userName, messages } = props;
  const chat = chats && chats[activeChat];

  const renderMessages = () => {
    const keys = Object.keys(messages);

    return keys.map((key, index) => {
      const message = messages[key];
      const lastMessageKey = index === 0 ? null : keys[index - 1];
      const isMyMessage = userName === message.sender.username;

      return (
        <div key={`msg_${index}`} className="message-block">
          {isMyMessage
            ? <MyMessage message={message} />
            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}
        </div>
      );
    });
  };

  if (!chat) return <div />;

  return (
    <div className="chat-feed">
      <div className="chat-title-container">
        <div className="chat-title">{chat.title}</div>
        <div className="chat-subtitle">
          {chat.people.map((person) => person.person.username).join(', ')}
        </div>
      </div>
      {renderMessages()}
      <div className="message-form-container">
        <MessageForm {...props} chatId={activeChat} />
      </div>
    </div>
  );
};

export default ChatFeed;



//Message form

/* Update message-form styles */
.message-form {
    display: flex; /* Use flexbox for layout */
    align-items: center; /* Align items vertically */
    margin-top: 20px; /* Add margin top for spacing */
  }
  
  /* Update message-input styles */
  .message-input {
    flex: 1; /* Take up remaining space */
    padding: 12px; /* Add padding for better spacing */
    border: none; /* Remove border */
    border-radius: 25px; /* Add border radius */
    background-color: #f0f0f0; /* Set background color */
    margin-right: 10px; /* Add margin right for spacing */
    outline: none; /* Remove outline */
  }
  
  /* Update image-button styles */
  .image-button {
    cursor: pointer; /* Add pointer cursor */
    padding: 10px; /* Add padding for better spacing */
    border-radius: 50%; /* Make button circular */
    background-color: #7554a0; /* Set background color */
    color: #fff; /* Set text color */
    transition: background-color 0.3s; /* Add transition effect */
  }
  
  .image-button:hover {
    background-color: #5f4390; /* Update background color on hover */
  }
  
  /* Update picture-icon styles */
  .picture-icon {
    font-size: 20px; /* Increase icon size */
  }
  
  /* Update send-button styles */
  .send-button {
    cursor: pointer; /* Add pointer cursor */
    padding: 10px; /* Add padding for better spacing */
    border: none; /* Remove border */
    border-radius: 50%; /* Make button circular */
    background-color: #7554a0; /* Set background color */
    color: #fff; /* Set text color */
    transition: background-color 0.3s; /* Add transition effect */
  }
  
  .send-button:hover {
    background-color: #5f4390; /* Update background color on hover */
  }
  
  /* Update send-icon styles */
  .send-icon {
    font-size: 20px; /* Increase icon size */
  }

  



  // message form 


  import { useState } from 'react';
import { SendOutlined, PictureOutlined } from '@ant-design/icons';
import { sendMessage, isTyping } from 'react-chat-engine';

const MessageForm = (props) => {
  const [value, setValue] = useState('');
  const { chatId, creds } = props;

  const handleChange = (event) => {
    setValue(event.target.value);

    isTyping(props, chatId);
  };

  const handleSubmit = (event) => {
    event.preventDefault();

    const text = value.trim();

    if (text.length > 0) {
      sendMessage(creds, chatId, { text });
    }

    setValue('');
  };

  const handleUpload = (event) => {
    sendMessage(creds, chatId, { files: event.target.files, text: '' });
  };

  return (
    <form className="message-form" onSubmit={handleSubmit}>
      <input
        className="message-input"
        placeholder="Send a message..."
        value={value}
        onChange={handleChange}
        onSubmit={handleSubmit}
      />
      <label htmlFor="upload-button">
        <span className="image-button">
          <PictureOutlined className="picture-icon" />
        </span>
      </label>
      <input
        type="file"
        multiple={false}
        id="upload-button"
        style={{ display: 'none' }}
        onChange={handleUpload.bind(this)}
      />
      <button type="submit" className="send-button">
        <SendOutlined className="send-icon" />
      </button>
    </form>
  );
};

export default MessageForm;




// my message


/* Update message styles */
.message {
    background-color: #7554a0; /* Set background color */
    color: #fff; /* Set text color */
    padding: 12px; /* Add padding for better spacing */
    border-radius: 10px; /* Add border radius */
    margin-right: 18px; /* Add margin right for spacing */
    margin-bottom: 10px; /* Add margin bottom for spacing */
    max-width: 70%; /* Set max-width for better responsiveness */
    word-wrap: break-word; /* Allow long words to break */
  }
  
  /* Update message-image styles */
  .message-image {
    float: right; /* Float image to the right */
    border-radius: 10px; /* Add border radius */
    margin-right: 18px; /* Add margin right for spacing */
    margin-bottom: 10px; /* Add margin bottom for spacing */
    max-width: 70%; /* Set max-width for better responsiveness */
  }

  

  //my message


  const MyMessage = ({ message }) => {
    if (message.attachments && message.attachments.length > 0) {
      return (
        <img
          src={message.attachments[0].file}
          alt="message-attachment"
          className="message-image"
        />
      );
    }
  
    return (
      <div className="message">
        {message.text}
      </div>
    );
  };
  
  export default MyMessage;

  

    



  //their message


  /* Update their-message styles */
.their-message {
    background-color: #cabcdc; /* Set background color */
    color: #333; /* Set text color */
    padding: 12px; /* Add padding for better spacing */
    border-radius: 10px; /* Add border radius */
    margin-left: 48px; /* Add margin left for spacing */
    margin-bottom: 10px; /* Add margin bottom for spacing */
    max-width: 70%; /* Set max-width for better responsiveness */
    word-wrap: break-word; /* Allow long words to break */
  }
  
  /* Update their-message-image styles */
  .their-message-image {
    float: left; /* Float image to the left */
    border-radius: 10px; /* Add border radius */
    margin-left: 48px; /* Add margin left for spacing */
    margin-bottom: 10px; /* Add margin bottom for spacing */
    max-width: 70%; /* Set max-width for better responsiveness */
  }

  


  //their Message

  const TheirMessage = ({ lastMessage, message }) => {
    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;
  
    return (
      <div className="message-row">
        {isFirstMessageByUser && (
          <div
            className="message-avatar"
            style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}
          />
        )}
        {message.attachments && message.attachments.length > 0
          ? (
            <img
              src={message.attachments[0].file}
              alt="message-attachment"
              className="their-message-image"
            />
          )
          : (
            <div className="their-message">
              {message.text}
            </div>
          )}
      </div>
    );
  };
  
  export default TheirMessage;

  
  

